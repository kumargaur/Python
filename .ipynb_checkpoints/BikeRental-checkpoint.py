{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "class BikeRental:\n",
    "    \n",
    "    def __init__(self,stock=0):\n",
    "        \"\"\"\n",
    "        Our constructor class that instantiates bike rental shop.\n",
    "        \"\"\"\n",
    "\n",
    "        self.stock = stock\n",
    "\n",
    "    def displaystock(self):\n",
    "        \"\"\"\n",
    "        Displays the bikes currently available for rent in the shop.\n",
    "        \"\"\"\n",
    "\n",
    "        print(\"We have currently {} bikes available to rent.\".format(self.stock))\n",
    "        return self.stock\n",
    "\n",
    "    def rentBikeOnHourlyBasis(self, n):\n",
    "        \"\"\"\n",
    "        Rents a bike on hourly basis to a customer.\n",
    "        \"\"\"\n",
    "        if n <= 0:\n",
    "            print(\"Number of bikes should be positive!\")\n",
    "            return None\n",
    "        \n",
    "        elif n > self.stock:\n",
    "            print(\"Sorry! We have currently {} bikes available to rent.\".format(self.stock))\n",
    "            return None\n",
    "        \n",
    "        else:\n",
    "            now = datetime.datetime.now()                      \n",
    "            print(\"You have rented a {} bike(s) on hourly basis today at {} hours.\".format(n,now.hour))\n",
    "            print(\"You will be charged $5 for each hour per bike.\")\n",
    "            print(\"We hope that you enjoy our service.\")\n",
    "\n",
    "            self.stock -= n\n",
    "            return now      \n",
    "     \n",
    "    def rentBikeOnDailyBasis(self, n):\n",
    "        \"\"\"\n",
    "        Rents a bike on daily basis to a customer.\n",
    "        \"\"\"\n",
    "        if n <= 0:\n",
    "            print(\"Number of bikes should be positive!\")\n",
    "            return None\n",
    "\n",
    "        elif n > self.stock:\n",
    "            print(\"Sorry! We have currently {} bikes available to rent.\".format(self.stock))\n",
    "            return None\n",
    "    \n",
    "        else:\n",
    "            now = datetime.datetime.now()                      \n",
    "            print(\"You have rented {} bike(s) on daily basis today at {} hours.\".format(n, now.hour))\n",
    "            print(\"You will be charged $20 for each day per bike.\")\n",
    "            print(\"We hope that you enjoy our service.\")\n",
    "\n",
    "            self.stock -= n\n",
    "            return now\n",
    "        \n",
    "    def rentBikeOnWeeklyBasis(self, n):\n",
    "        \"\"\"\n",
    "        Rents a bike on weekly basis to a customer.\n",
    "        \"\"\"\n",
    "        if n <= 0:\n",
    "            print(\"Number of bikes should be positive!\")\n",
    "            return None\n",
    "\n",
    "        elif n > self.stock:\n",
    "            print(\"Sorry! We have currently {} bikes available to rent.\".format(self.stock))\n",
    "            return None        \n",
    "        \n",
    "        else:\n",
    "            now = datetime.datetime.now()\n",
    "            print(\"You have rented {} bike(s) on weekly basis today at {} hours.\".format(n, now.hour))\n",
    "            print(\"You will be charged $60 for each week per bike.\")\n",
    "            print(\"We hope that you enjoy our service.\")\n",
    "            self.stock -= n\n",
    "\n",
    "            return now\n",
    "    \n",
    "\n",
    "    \n",
    "    def returnBike(self, request):\n",
    "        \"\"\"\n",
    "        1. Accept a rented bike from a customer\n",
    "        2. Replensihes the inventory\n",
    "        3. Return a bill\n",
    "        \"\"\"\n",
    "        rentalTime, rentalBasis, numOfBikes = request\n",
    "        bill = 0\n",
    "\n",
    "        if rentalTime and rentalBasis and numOfBikes:\n",
    "            self.stock += numOfBikes\n",
    "            now = datetime.datetime.now()\n",
    "            rentalPeriod = now - rentalTime\n",
    "        \n",
    "            # hourly bill calculation\n",
    "            if rentalBasis == 1:\n",
    "                bill = round(rentalPeriod.seconds / 3600) * 5 * numOfBikes\n",
    "                \n",
    "            # daily bill calculation\n",
    "            elif rentalBasis == 2:\n",
    "                bill = round(rentalPeriod.days) * 20 * numOfBikes\n",
    "                \n",
    "            # weekly bill calculation\n",
    "            elif rentalBasis == 3:\n",
    "                bill = round(rentalPeriod.days / 7) * 60 * numOfBikes\n",
    "            \n",
    "               \n",
    "            if (3 <= numOfBikes <= 5):\n",
    "                print(\"You are eligible for Family rental promotion of 30% discount\")\n",
    "                bill = bill * 0.7\n",
    "\n",
    "            print(\"Thanks for returning your bike. Hope you enjoyed our service!\")\n",
    "            print(\"That would be ${}\".format(bill))\n",
    "            return bill\n",
    "        else:\n",
    "            print(\"Are you sure you rented a bike with us?\")\n",
    "            return None\n",
    "\n",
    "\n",
    "\n",
    "class Customer:\n",
    "\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        Our constructor method which instantiates various customer objects.\n",
    "        \"\"\"\n",
    "        \n",
    "        self.bikes = 0\n",
    "        self.rentalBasis = 0\n",
    "        self.rentalTime = 0\n",
    "        self.bill = 0\n",
    "\n",
    "    \n",
    "    def requestBike(self):\n",
    "        \"\"\"\n",
    "        Takes a request from the customer for the number of bikes.\n",
    "        \"\"\"\n",
    "                      \n",
    "        bikes = input(\"How many bikes would you like to rent?\")\n",
    "        try:\n",
    "            bikes = int(bikes)\n",
    "        except ValueError:\n",
    "            print(\"That's not a positive integer!\")\n",
    "            return -1\n",
    "\n",
    "        if bikes < 1:\n",
    "            print(\"Invalid input. Number of bikes should be greater than zero!\")\n",
    "            return -1\n",
    "        else:\n",
    "            self.bikes = bikes\n",
    "        return self.bikes\n",
    "     \n",
    "    def returnBike(self):\n",
    "        \"\"\"\n",
    "        Allows customers to return their bikes to the rental shop.\n",
    "        \"\"\"\n",
    "        if self.rentalBasis and self.rentalTime and self.bikes:\n",
    "            return self.rentalTime, self.rentalBasis, self.bikes  \n",
    "        else:\n",
    "            return 0,0,0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
